// SHEETS-SYNC.JS - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å —Ä–∞–±–æ—á–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
class GoogleSheetSync {
    constructor(storage) {
        this.storage = storage;
        this.isOnline = navigator.onLine;
        this.syncTimer = null;
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏
        window.addEventListener('online', () => {
            this.isOnline = true;
            this.updateSyncStatus(true);
            this.sync();
        });
        
        window.addEventListener('offline', () => {
            this.isOnline = false;
            this.updateSyncStatus(false);
        });
    }
    
    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    startAutoSync() {
        if (this.syncTimer) {
            clearInterval(this.syncTimer);
        }
        
        this.syncTimer = setInterval(() => {
            if (this.isOnline) {
                this.sync();
            }
        }, CONFIG.SYNC_INTERVAL);
        
        // –ü–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ä–∞–∑—É
        if (this.isOnline) {
            this.sync();
        }
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    stopAutoSync() {
        if (this.syncTimer) {
            clearInterval(this.syncTimer);
            this.syncTimer = null;
        }
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
    async sync() {
        if (!this.isOnline) {
            console.log('–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞');
            return false;
        }
        
        try {
            console.log('üîÑ –ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
            this.updateSyncStatus(true, '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets
            await this.pushToSheets();
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Ç–æ—Ä–æ–≥–æ iPhone
            await this.pullFromSheets();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            const data = this.storage.getData();
            data.lastSync = new Date().toISOString();
            this.storage.saveData(data);
            
            this.updateSyncStatus(true, '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
            console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
            return true;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
            this.updateSyncStatus(true, '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
            return false;
        }
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –í GOOGLE SHEETS
    async pushToSheets() {
        const data = this.storage.getData();
        const transactions = data.transactions || [];
        
        if (!transactions || transactions.length === 0) {
            console.log('–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
            return;
        }
        
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...`);
        
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Apps Script URL –¥–ª—è –∑–∞–ø–∏—Å–∏
            const response = await fetch(CONFIG.APPS_SCRIPT_URL, {
                method: 'POST',
                mode: 'no-cors',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    action: 'addTransactions',
                    data: transactions,
                    timestamp: new Date().toISOString()
                })
            });
            
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ Google Sheets');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error);
        }
    }
    
    // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ –≤—Ç–æ—Ä–æ–≥–æ iPhone
    async pullFromSheets() {
        if (!this.isOnline) return;
        
        try {
            console.log('üì• –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Google Sheets...');
            
            // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Google Sheets API
            const sheetUrl = `https://sheets.googleapis.com/v4/spreadsheets/${CONFIG.SHEET_ID}/values/–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏?key=${CONFIG.API_KEY}`;
            
            const response = await fetch(sheetUrl);
            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Google Sheets');
            }
            
            const result = await response.json();
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å Google Sheets');
            
            // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º localStorage
            if (result.values && result.values.length > 1) {
                this.mergeTransactions(result.values);
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
    
    // –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–≤—É—Ö iPhone
    mergeTransactions(sheetRows) {
        const data = this.storage.getData();
        const localTransactionIds = new Set(data.transactions.map(t => t.id));
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
        for (let i = 1; i < sheetRows.length; i++) {
            const row = sheetRows[i];
            if (!row || row.length < 7) continue;
            
            const transaction = {
                id: row,
                month: row,
                date: row,
                name: row,
                amount: parseFloat(row),
                category: parseInt(row),
                type: row
            };
            
            // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ - –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
            if (!localTransactionIds.has(transaction.id)) {
                data.transactions.push(transaction);
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${transaction.name}`);
            }
        }
        
        this.storage.saveData(data);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    updateSyncStatus(online, message = '') {
        const statusEl = document.getElementById('sync-status');
        if (!statusEl) return;
        
        if (online) {
            statusEl.innerHTML = `<span style="color: #A6F5C8;">‚úÖ –û–Ω–ª–∞–π–Ω</span>`;
            if (message) {
                statusEl.innerHTML += ` <span style="font-size: 12px;">${message}</span>`;
            }
        } else {
            statusEl.innerHTML = '<span style="color: #F5A6A6;">‚ùå –û—Ñ—Ñ–ª–∞–π–Ω</span>';
        }
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–∫–Ω–æ–ø–∫–∞)
    async forceSyncNow() {
        if (!this.isOnline) {
            alert('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
            return;
        }
        
        const result = await this.sync();
        if (result) {
            alert('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } else {
            alert('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        }
    }
}
