// UI.JS - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
class BudgetUI {
    constructor(storage, sync) {
        this.storage = storage;
        this.sync = sync;
        this.currentScreen = 'dashboard';
        this.chart = null;
        this.editingTransactionId = null;
        this.initEventListeners();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    initEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-item').forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                const screen = item.dataset.screen;
                this.switchScreen(screen);
            })
        });

        // –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        const addExpenseBtn = document.getElementById('add-expense-btn');
        if (addExpenseBtn) {
            addExpenseBtn.addEventListener('click', () => this.openAddModal('expense'))
        }
        const addIncomeBtn = document.getElementById('add-income-btn');
        if (addIncomeBtn) {
            addIncomeBtn.addEventListener('click', () => this.openAddModal('income'))
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeModalBtn = document.getElementById('close-modal');
        if (closeModalBtn) {
            closeModalBtn.addEventListener('click', () => this.closeModal())
        }
        const modal = document.getElementById('transaction-modal');
        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.closeModal();
                }
            })
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const saveBtn = document.getElementById('save-transaction');
        if (saveBtn) {
            saveBtn.addEventListener('click', () => this.saveTransaction());
        }
    }

    // ===== –ù–û–í–û–ï: –ü—Ä—è–º–∞—è —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ =====
    // –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—è —Å ID: expense-name, expense-amount, expense-date, expense-category
    addExpense() {
      // –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º—ã
      const nameInput = document.getElementById('expense-name');
      const amountInput = document.getElementById('expense-amount');
      const dateInput = document.getElementById('expense-date');
      const categoryInput = document.getElementById('expense-category');

      const name = nameInput?.value?.trim();
      const amount = parseFloat(amountInput?.value);
      const date = dateInput?.value;
      const categoryId = parseInt(categoryInput?.value);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (!name || !amount || !date || !categoryId) {
        alert('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
        return;
      }
      if (amount <= 0) {
        alert('‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!');
        return;
      }

      // –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      const transaction = {
        id: Date.now().toString(),
        name: name,
        amount: amount,
        date: date,
        categoryId: categoryId,
        type: 'expense'
      };

      const data = this.storage.getData();
      data.transactions.push(transaction);
      data.expenses = (data.expenses || 0) + amount;
      this.storage.saveData(data);

      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥: ${name} - ${amount}‚ÇΩ`);

      // üîÑ –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      if (typeof this.renderDashboard === 'function') this.renderDashboard();
      if (typeof this.renderExpenses === 'function') this.renderExpenses();

      // üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
      if (nameInput) nameInput.value = '';
      if (amountInput) amountInput.value = '';
      if (dateInput) dateInput.value = new Date().toISOString().split('T')[0]; // —Å–µ–≥–æ–¥–Ω—è
      if (categoryInput) categoryInput.value = '1';

      // üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const notif = document.createElement('div');
      notif.textContent = '‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!';
      notif.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4CAF50;
        color: white;
        padding: 12px 24px;
        border-radius: 8px;
        font-weight: bold;
        z-index: 9999;
      `;
      document.body.appendChild(notif);
      setTimeout(() => notif.remove(), 2000);

      // üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Firebase
      if (this.sync && typeof this.sync.sync === 'function') {
        this.sync.sync().catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', err));
      }
    }

    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–ª–∞—Å—Å–∞ (—Ä–µ–Ω–¥–µ—Ä—ã, –º–æ–¥–∞–ª–∫–∏ –∏ —Ç.–¥.) ...

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    editCategoryLimit(categoryId) {
        const category = this.storage.getCategories().find(c => c.id === categoryId);
        if (!category) return;
        const newLimit = prompt(`–ù–æ–≤—ã–π –ª–∏–º–∏—Ç –¥–ª—è "${category.name}":`, category.limit);
        if (newLimit === null) return;
        const limit = parseFloat(newLimit);
        if (isNaN(limit) || limit < 0) {
            alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
            return;
        }
        this.storage.updateCategoryLimit(categoryId, limit);
        this.renderPlan();
    }

    // –†–µ–Ω–¥–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
    renderSettings() {
        const data = this.storage.getData();
        const lastSync = data.lastSync
            ? new Date(data.lastSync).toLocaleString('ru-RU')
            : '–ù–∏–∫–æ–≥–¥–∞';
        document.getElementById('last-sync-time').textContent = lastSync;
        document.getElementById('app-version').textContent = CONFIG.VERSION;
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
    clearCache() {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!')) return;
        this.storage.clearAll();
        alert('–ö–µ—à –æ—á–∏—â–µ–Ω. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è.');
        location.reload();
    }
}
