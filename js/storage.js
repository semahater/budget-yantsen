// STORAGE.JS - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –≤ localStorage
class BudgetStorage {
    constructor() {
        this.initializeIfNeeded();
        // –í—ã–∑–æ–≤ checkAndResetIfNewMonth –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ app.js
        // –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏)
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    initializeIfNeeded() {
        const data = this.getData();
        if (!data || !data.initialized) {
            console.log('–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö');
            const now = new Date();
            const initialData = {
                initialized: true,
                currentMonth: now.getMonth(),
                currentYear: now.getFullYear(),
                income: 0,
                transactions: [],
                categories: CONFIG.CATEGORIES.map(cat => ({
                    id: cat.id,
                    name: cat.name,
                    limit: cat.limit,
                    color: cat.color
                })),
                lastSync: null
            };
            this.saveData(initialData);
            return initialData;
        }
        return data;
    }
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    getData() {
        try {
            const data = localStorage.getItem('budgetData');
            return data ? JSON.parse(data) : null;
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage:', e);
            return null;
        }
    }
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    saveData(data) {
        try {
            localStorage.setItem('budgetData', JSON.stringify(data));
            return true;
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ localStorage:', e);
            return false;
        }
    }
    // –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    getTransactions() {
        const data = this.getData();
        if (!data) return [];
        const monthKey = `${data.currentYear}-${String(data.currentMonth + 1).padStart(2, '0')}`;
        return data.transactions.filter(t => t.month === monthKey);
    }
    // –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    addTransaction(transaction) {
        const data = this.getData();
        const monthKey = `${data.currentYear}-${String(data.currentMonth + 1).padStart(2, '0')}`;
        const newTransaction = {
            id: Date.now().toString(),
            month: monthKey,
            date: transaction.date,
            name: transaction.name,
            amount: parseFloat(transaction.amount),
            category: transaction.category,
            type: transaction.type
        };
        data.transactions.push(newTransaction);
        this.saveData(data);
        return newTransaction;
    }
    // –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    deleteTransaction(id) {
        const data = this.getData();
        data.transactions = data.transactions.filter(t => t.id !== id);
        this.saveData(data);
    }
    // –û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    updateTransaction(id, updates) {
        const data = this.getData();
        const index = data.transactions.findIndex(t => t.id === id);
        if (index !== -1) {
            data.transactions[index] = { ...data.transactions[index], ...updates };
            this.saveData(data);
        }
    }
    // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Ö–æ–¥
    getIncome() {
        const data = this.getData();
        return data ? data.income : 0;
    }
    // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Ö–æ–¥
    setIncome(amount) {
        const data = this.getData();
        data.income = parseFloat(amount);
        this.saveData(data);
    }
    // –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    getCategories() {
        const data = this.getData();
        return data ? data.categories : [];
    }
    // –û–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    updateCategoryLimit(categoryId, newLimit) {
        const data = this.getData();
        const category = data.categories.find(c => c.id === categoryId);
        if (category) {
            category.limit = parseFloat(newLimit);
            this.saveData(data);
        }
    }
    // –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    changeMonth(offset) {
        const data = this.getData();
        let month = data.currentMonth + offset;
        let year = data.currentYear;
        if (month < 0) {
            month = 11;
            year--;
        } else if (month > 11) {
            month = 0;
            year++;
        }
        data.currentMonth = month;
        data.currentYear = year;
        this.saveData(data);
        return { month, year };
    }
    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    clearAll() {
        localStorage.removeItem('budgetData');
        this.initializeIfNeeded();
    }
    // üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –º–µ—Å—è—Ü–∞
    getCurrentMonth() {
        const now = new Date();
        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, '0');
        return `${year}-${month}`;
    }
    checkAndResetIfNewMonth() {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ
            const data = this.getData();
            if (!data) {
                console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –º–µ—Å—è—Ü–∞');
                return;
            }
            
            const currentMonth = this.getCurrentMonth();
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ –º–µ—Å—è—Ü –∏–∑–º–µ–Ω–∏–ª—Å—è
            if (!data.lastMonth || data.lastMonth !== currentMonth) {
                console.log(`üìÖ –ù–æ–≤—ã–π –º–µ—Å—è—Ü (${currentMonth})! –û–±–Ω—É–ª—è–µ–º –¥–æ—Ö–æ–¥ –∏ —Ä–∞—Å—Ö–æ–¥—ã.`);
                
                data.income = 0;
                data.expenses = 0;
                data.transactions = [];
                data.lastMonth = currentMonth;
                
                this.saveData(data);
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞');
            }
        } catch (error) {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ—Å—è—Ü–∞:', error);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        }
    }
}
